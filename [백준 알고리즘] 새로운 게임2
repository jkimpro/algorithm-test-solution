//원판돌리기 (삼성sw기출)

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>


using namespace std;

typedef struct cell{
    int r,c;
}Cell;

typedef struct time{
    int x,d,k; //x 배수, d 방향, k 칸회전수
}Time;

int rdir[4] = {-1,0,1,0};
int cdir[4] = {0,1,0,-1};

int arr[101][101];
int n,m,t;
int sum =0;
int indCount =0;
vector <Time> times;

//m 숫자 만큼 밀어버리기.
bool canGo(int r, int c, int val){
    if(r<=0 || r>n || c<=0 || c>m){
        return false;
    }
    else if(arr[r][c] == -1){
        return false;
    }
    else if(arr[r][c] == val){
        return true;
    }
    else{
        return false;
    }
}

//m 상황에 맞게 바꾸도록
int main(){
    
    scanf("%d %d %d", &n, &m, &t);
    for(int i =1; i<=n; i++){
        for(int j =1; j<=m; j++){
            scanf("%d", &arr[i][j]);
            sum+=arr[i][j];
            indCount += 1;
        }
    }
    
    for(int i =0; i<t; i++){
        Time temp;
        scanf("%d %d %d", &temp.x, &temp.d, &temp.k);
        times.push_back(temp);
    }
    
    for(int time = 0; time<times.size(); time++){
        bool erased = false;
        int mainX = times[time].x;
        int mainD = times[time].d;
        int mainK = times[time].k;
//
//        번호가 xi의 배수인 원판을 di방향으로 ki칸 회전시킨다. di가 0인 경우는 시계 방향, 1인 경우는 반시계 방향이다.
//        인접하면서 수가 같은 것을 모두 찾는다.
//        그러한 수가 있는 경우에는 원판에서 인접하면서 같은 수를 모두 지운다.
//        없는 경우에는 원판에 적힌 수의 평균을 구하고, 평균보다 큰 수에서 1을 빼고, 작은 수에는 1을 더한다.
        
        for(int i = 1; i<=n; i++){
            if(i%mainX ==0){
                vector <int> temp;
                for(int j = 1; j<=m; j++){
                    temp.push_back(arr[i][j]);
                }
                
                if(mainD==0){   //시계 방향일 경우
                    for(int j=0; j<temp.size(); j++){
                        if(j+1+mainK>m){   //범위를 벗어나는 경우
                            arr[i][j+1+mainK-m] = temp[j];
                        }
                        else{   //아닌경우
                            arr[i][j+1+mainK] = temp[j];
                        }
                    }
                }
                else{   //반시계 방향일 경우
                    for(int j=0; j<temp.size(); j++){
                        if(j+1-mainK<1){   //범위를 벗어나는 경우
                            arr[i][j+1-mainK+m] = temp[j];
                        }
                        else{   //아닌경우
                            arr[i][j+1-mainK] = temp[j];
                        }
                    }
                }
            }
        }
        
        for(int i =1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(arr[i][j] == -1){
                    continue;
                }
                
                int hereSum = arr[i][j];
                int hereCount =1;
                int toolVal = arr[i][j];
                bool hereEra = false;
                queue<Cell> root;
                root.push({i,j});
                arr[i][j] = -1;
                
                while(!root.empty()){
                    Cell now = root.front();
                    root.pop();
                    
                    for(int dir = 0; dir<4; dir++){
                        int nowR = now.r + rdir[dir];
                        int nowC = now.c + cdir[dir];
                        
                        if(nowC >m ){nowC = 1;}
                        else if(nowC <1){nowC = m;}
                        
                        if(canGo(nowR, nowC, toolVal)){
                            arr[nowR][nowC] = -1;
                            root.push({nowR, nowC});
                            hereSum += toolVal;
                            hereCount +=1;
                            erased = true;
                            hereEra = true;
                        }
                    }
                }
                if(hereEra== false){
                    arr[i][j] = toolVal;
                }
                else{
                    sum-=hereSum;
                    indCount-=hereCount;
                }
            }
        }
        
        if(erased == false){
            double avg =(double)sum/(double)indCount;
            int tempSum =0;
            int tempIndCount =0;
            
            for(int i=1; i<=n; i++){
                for(int j =1; j<=m; j++){
                    if(arr[i][j] == -1){continue;}
                    else if(arr[i][j] > avg){
                        arr[i][j] -=1;
                        tempSum+= arr[i][j];
                        tempIndCount+=1;
                    }
                    else if(arr[i][j] < avg){
                        arr[i][j] +=1;
                        tempSum+= arr[i][j];
                        tempIndCount+=1;
                    }
                    else{
                        tempSum+= arr[i][j];
                        tempIndCount+=1;
                    }
                }
            }
            
            sum = tempSum;
            indCount = tempIndCount;
        }
    }
    
    
    printf("%d", sum);
    return 0;
}
