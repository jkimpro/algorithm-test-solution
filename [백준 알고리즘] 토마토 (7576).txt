
//토마토 (7576)
#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct loc {
	int r, c;
}Loc;
int n, m;
int result;
int limit;
int rMove[4] = { -1,0,1,0 };
int cMove[4] = { 0,1,0,-1 };

int arr[1001][1001];

vector <Loc> loc;
queue <Loc> tomato;		//수정 요망 ->런 타임 에러 방지

bool canGo(int r, int c) {
	if (r >= n || r < 0 || c >= m || c < 0) {
		return false;
	}
	else if (arr[r][c] == -1) { return false; }
	else if (arr[r][c] == 1) { return false; }
	else if(arr[r][c] ==0) {
		return true;
	}
}
int main() {
	vector <int> size;
	int nums =0;
	int limit = 0;
	result = 0;
	scanf("%d %d", &m, &n);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &arr[i][j]);

			if (arr[i][j] == 1) {
				loc.push_back({ i,j });
				nums++;
			}
			else if (arr[i][j] == -1) { limit++; }
		}
	}

	for (int i = 0; i < loc.size(); i++) {
		tomato.push({ loc[i].r, loc[i].c });
		size.push_back(1);

	}

	while (1) {
		int emptyCount = 0;
		int flag = 0;
	
		for (int i = 0; i < loc.size(); i++) {
			if (size[i] ==0) { emptyCount++; continue; } //
			else {
				int count = 0;
				for (int j = 0; j < size[i]; j++) {
					Loc temp = tomato.front();
					tomato.pop();

					for (int k = 0; k < 4; k++) {

						if (canGo(temp.r + rMove[k], temp.c + cMove[k])) {
							tomato.push({ temp.r + rMove[k], temp.c + cMove[k] });
							arr[temp.r + rMove[k]][temp.c + cMove[k]] = 1;
							nums++;
							count++;
							flag = 1;
						}
					}
				}
				//다시 집어넣기
				size[i] = count;
			}
		}
		if (emptyCount == loc.size()) { break; }
		if (flag == 1) { result++; }
	}
	
	if (nums != (n*m-limit)) {	printf("-1");}
	else {printf("%d", result);}
	
	return 0;
}