////내답안 visit 관련 참조
//말이 되고픈 원숭이
#include <stdio.h>
#include <stdlib.h>
#include <queue>

using namespace std;

typedef struct monk {
	int r, c;
	int count;
	int now;
}Monk;

//4번부터 말방향
int rMove[12] = {-1,0,1,0};	//모든 방향
int cMove[12] = { 0,1,0,-1};

int horseRMove[8] = { -2,	-1,	1,2,	2,	1,	-1,-2 };
int horseCMove[8] = {	1,	2,	2,1,	-1,-2,	-2,-1 };

int n, m;
int k;
int result;
int zeroFlag;
int arr[205][205];
bool visit[32][201][201];

bool canGo(int r, int c, int option) {		//option이 0일 경우 동서남북 / 1일경우 이외사항
	if (r < 0 || r >= n || c < 0 || c >= m) {return false;}
	if (arr[r][c] == 1) { return false; }
	if (visit[option][r][c] == true) {return false;}
	if (arr[r][c] == 0) { return true; }
	
}

int main() {
	
	result = 99999;
	zeroFlag = 0;
	scanf("%d", &k);

	scanf("%d %d", &m, &n);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	//연산과정
	Monk monk = {0,0,k,0};

	visit[k][monk.r][monk.c] = true;
	
	queue <Monk> root;
	root.push(monk);

	while (!root.empty()) {
		Monk temp = root.front();
		root.pop();

	//	printf("now: %d r:%d c:%d\n", temp.now, temp.r, temp.c);
		if (temp.r == n - 1 && temp.c == m - 1) {
			result = min(result,temp.now);
			zeroFlag = 1;
		}

		for (int dir = 0; dir < 8; dir++) {
			if (dir >= 0 && dir <= 3) {
				if (canGo(temp.r + rMove[dir], temp.c + cMove[dir], temp.count)) {
					Monk insert = { temp.r + rMove[dir], temp.c + cMove[dir],temp.count,temp.now + 1 };
					visit[insert.count][insert.r][insert.c] = true;
					root.push(insert);
				}
			}
			if (temp.count != 0) {
				if (canGo(temp.r + horseRMove[dir], temp.c + horseCMove[dir], temp.count-1)) {
					Monk insert = { temp.r + horseRMove[dir], temp.c + horseCMove[dir],temp.count - 1,temp.now + 1 };
					visit[insert.count][insert.r][insert.c] = true;
					root.push(insert);
				}
			}
		}
	}
	
	if (result == 99999 && zeroFlag ==0) { printf("-1"); }
	else if (n==1 && m==1 && arr[n-1][m-1] == 1) { printf("-1"); }
	else {
		printf("%d", result);
	}

	return 0;
}

