#include <stdio.h>
#include <algorithm>
#include <queue>

using namespace std;
typedef struct Loc {
	int r, c;
	int count;
	char arr[3][3];
	int fore;
	int matchCount;
}Loc;

//이미 한번 했던 전체판은 나오지 못하도록

int dr[4] = { 1,0,-1,0 };
int dc[4] = { 0,1,0,-1 };

char ans[3][3] = { {'1','2','3'},{'4','5','6'},{'7','8','0'} };
char arr[5][5];

bool visit[81][3][3];
queue <Loc> root;

bool change = false;
int maxCount = 0;
int result = 50;

bool canGo(int r, int c) {
	if (r < 0 || r >= 3 || c < 0 || c >= 3) {
		return false;
	}
	else {
		return true;
	}
}

int main() {
	Loc start;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			int temp;
			scanf("%d", &temp);
			arr[i][j] = temp +'0';
		}
	}
	

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			start.arr[i][j] = arr[i][j];
			if (arr[i][j] == '0') {
				start.r = i;
				start.c = j;
				start.count = 0;
				start.fore = -1;
				start.matchCount = 0;
			}
		}
	}
	

	root.push(start);

	while (!root.empty()) {
		Loc temp = root.front();
		root.pop();

		//printf("%d %d %d %d\n", temp.r, temp.c, temp.count, result);
		int numCount = 0;

		if (temp.count > result) {
			continue;
		}

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (ans[i][j] == temp.arr[i][j]) {
					numCount++;
				}
			}
		}

		if (temp.matchCount > numCount || maxCount > numCount) { continue; }
		else {temp.matchCount = numCount;}

		if (numCount == 9) {
			result = min(result, temp.count);
			change = true;
			break;
		}
		else {
			for (int dir = 0; dir < 4; dir++) {
				if ((temp.fore+2)%4 == dir) { continue; }
				else if (canGo(temp.r+dr[dir], temp.c +dc[dir])) {
					Loc go;
					go.r = temp.r + dr[dir]; go.c = temp.c + dc[dir];
					go.count = temp.count + 1;
					go.fore = dir;

					for (int i = 0; i < 3; i++) {
						for (int j = 0; j < 3; j++) {
							go.arr[i][j] = temp.arr[i][j];
						}
					}

					swap(go.arr[go.r][go.c], go.arr[temp.r][temp.c]);
					root.push(go);
				}
			}
		}

	}

	if (change == false) {
		printf("-1");
	}
	else {
		printf("%d", result);
	}
	return 0;
}