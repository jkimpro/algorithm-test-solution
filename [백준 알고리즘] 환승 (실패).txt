//환승 시간초과본

#include <stdio.h>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

typedef struct loc {
	int ind;
	int count;
}Loc;

int result = 0;
int n, k, m;
int visit[100002];
bool roots[100002][1000];

queue <Loc> go;

int main() {
	result = 10e9;
	scanf("%d %d %d", &n, &k, &m);
	
	for (int i = 0; i < m; i++) {

		vector <int> temp;
		for (int j = 0; j < k; j++) {
			int num;

			scanf("%d",&num);
			for (int i = 0; i < temp.size(); i++) {
				roots[temp[i]][num] = true;
				roots[num][temp[i]] = true;
			}
			temp.push_back(num);
		}

		//sort(temp.begin(), temp.end()); //sorting 으로 작은 숫자 위주
		/*
		for (int j = 0; j < temp.size(); j++) {	//temp[j] 가 행 역할
			for (int d = j+1; d < temp.size(); d++) {	//temp[d] 가 열 역할
				roots[temp[j]][temp[d]] = true;
			}
		}
		*/
		temp.clear();
	}

	go.push({ 1,1 });
	visit[1] = 1;
	
	while (!go.empty()) {
		Loc temp = go.front();
		go.pop();

		if (temp.ind == n) {
			result = temp.count;
			break;
		}
		else {
			//없을 경우는 pass
			for (int i = temp.ind+1; i <= n; i++) {
				if (roots[temp.ind][i] == false) { continue; }
				else {
					if (visit[i] == 0 || visit[i] > (temp.count + 1)) {
						//한번도 방문을 안할 경우 현재값 초기화
						visit[i] = (temp.count + 1);
						go.push({ i ,temp.count + 1 });
					}
				}
			}
		}
	}

	if (visit[n] != 0) {
		printf("%d", result);
	}
	else {
		printf("-1");
	}
	return 0;
}