//미로탈출
//1.무난한 bfs문제
//2. 벽을 뿌셨을때 visit[1]기준으로 이동
//3. 아닐 경우 visit[0]을 기준으로 이동

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

typedef struct cell{
    int r, c;
    bool use;
    int count;
}Cell;

int rdir[4] = {-1,0,1,0};
int cdir[4] = {0,1,0,-1};
int n,m;
int result =999999;
int arr[1001][1001];
bool visit[2][1001][1001];
bool check = false;
Cell start;
Cell t;

int main(){
    scanf("%d %d", &n, &m);
    
    scanf("%d %d", &start.r, &start.c);
    start.r-=1;
    start.c -=1;
    scanf("%d %d", &t.r, &t.c);
    t.r-=1;
    t.c-=1;
    
    for(int i =0;i<n; i++){
        for(int j =0;j<m; j++){
            scanf("%d", &arr[i][j]);
            for(int k =0;k<2; k++){
                visit[k][i][j] = false;
            }
        }
    }
    
    queue<Cell> root;
    root.push({start.r, start.c, false, 0});
    
    while(!root.empty()){
        Cell temp = root.front();
        root.pop();
        
        if(temp.r == t.r && temp.c == t.c){
            result = min(result, temp.count);
            check = true;
            break;
        }
        else{
            for(int i =0;i<4; i++){
                int nowR = temp.r +rdir[i];
                int nowC = temp.c +cdir[i];
                
                if(0<=nowR && nowR<n && 0<= nowC && nowC<m){
                    if(temp.use == true){ //이미 한번뚫어서, 뚫을수없는 경우
                        if(arr[nowR][nowC] ==0 && visit[1][nowR][nowC] == false){
                            visit[1][nowR][nowC] = true;
                            root.push({nowR, nowC, true, temp.count+1});
                        }
                    }
                    else{ //뚫을 수 있는 경우
                        if(arr[nowR][nowC] == 1 && visit[1][nowR][nowC] == false){
                            visit[1][nowR][nowC] = true;
                            root.push({nowR, nowC, true, temp.count+1});
                        }
                        else if(arr[nowR][nowC] == 0 && visit[0][nowR][nowC] == false){//0일경우
                            visit[0][nowR][nowC] = true;
                            root.push({nowR, nowC, false, temp.count+1});
                        }
                    }
                }
            }
        }
    }
    if(check){
        printf("%d", result);
    }
    else{
        printf("-1");
    }
    return 0;
}
