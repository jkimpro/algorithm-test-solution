//¾ç
#include <stdio.h>
#include <queue>

using namespace std;
typedef struct loc {
	int r, c;
}Loc;

int dr[4] = { -1,0,1,0 };
int dc[4] = { 0,-1,0,1 };
char arr[251][251];
bool visit[251][251];

int n, m;

bool canGo(int r, int c) {
	if (r < 0 || r >= n || c < 0 || c >= m) { return false; }
	else if (visit[r][c] == true) { return false; }
	else if (arr[r][c] == '#') { return false; }
	else {
		return true;
	}
}
int main() {
	int oNum =0;
	int vNum =0;

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		scanf("%s", arr[i]);
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == 'o') { oNum++; }
			if (arr[i][j] == 'v') { vNum++; }
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == '#') { continue; }
			
			int oCount =0;
			int vCount =0;
			queue<Loc> root;
		
			root.push({i,j});
			visit[i][j] = true;

			while (!root.empty()) {
				Loc temp = root.front();
				root.pop();
			
				if (arr[temp.r][temp.c] == 'v') vCount++;
				if (arr[temp.r][temp.c] == 'o') oCount++;
				
				for (int dir = 0; dir < 4; dir++) {
					if (canGo(temp.r + dr[dir], temp.c + dc[dir])) {
						visit[temp.r + dr[dir]][temp.c + dc[dir]] = true;
						root.push({ temp.r + dr[dir],temp.c + dc[dir]});
					}
				}
			}
			if (vCount >= oCount) { oNum -= oCount; }
			else { vNum -= vCount; }
		}
	}
	
	printf("%d %d", oNum, vNum);

	return 0;
}