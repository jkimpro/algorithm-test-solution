//새로운 게임2 풀이 (삼성 재풀이 대략 1시간30분 소요)

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

typedef struct cell{
    int r, c;
    int dir;
}Cell;

int rdir[5] ={0,0,0,-1,1};
int cdir[5] ={0,1,-1,0,0};


int n ,k;
int result = -1;
int arr[13][13];

vector <int> upper[12][12];
vector <Cell> root;
int changeDir(int dir){
    if(dir ==1){return 2;}
    if(dir ==2){return 1;}
    if(dir ==3){return 4;}
    if(dir ==4){return 3;}
    return 1;
}
int main(){
    scanf("%d %d", &n, &k);
    for(int i = 0; i<n; i++){
        for(int j = 0; j<n; j++){
            scanf("%d", &arr[i][j]);
        }
    }
    
    for(int i =0; i<k; i++){
        Cell temp;
        scanf("%d %d %d", &temp.r, &temp.c, &temp.dir);
        temp.r-=1; temp.c -=1;
        root.push_back(temp);
        upper[temp.r][temp.c].push_back(i);
        //printf("temp.r:%d temp.c%d size:%d\n",temp.r, temp.c, upper[temp.r][temp.c].size());
    }
    
    for(int turn = 1; turn <=1000; turn++){
        bool check = false;
        for(int i =0;i<root.size(); i++){
            int nowR = root[i].r + rdir[root[i].dir];
            int nowC = root[i].c + cdir[root[i].dir];
            
            if(nowR<0|| nowR>=n || nowC<0 || nowC>=n || arr[nowR][nowC] ==2){ //파란색
                //반대
                root[i].dir = changeDir(root[i].dir);
                nowR = root[i].r + rdir[root[i].dir];
                nowC = root[i].c + cdir[root[i].dir];
                if(nowR<0|| nowR>=n || nowC<0 || nowC>=n || arr[nowR][nowC] ==2){
                    continue;
                }
                //다음칸 가능 체크
                if(arr[nowR][nowC] == 1){
                    int mainR = root[i].r; int mainC = root[i].c;
                    
                    for(int j= 0;j<upper[mainR][mainC].size(); j++){
                        if(upper[mainR][mainC][j] == i){
                            //현재시점에서 맨끝까지 다음곳에 input한다
                            for(int k = upper[mainR][mainC].size()-1; k>= j; k--){
                                int ind = upper[mainR][mainC][k];
                                upper[mainR][mainC].pop_back();
                                root[ind].r = nowR; root[ind].c = nowC; //초기화까지 한번에 다함
                                upper[nowR][nowC].push_back(ind);
                            }
                            break;
                        }
                    }
                }
                if(arr[nowR][nowC] == 0){
                    int mainR = root[i].r; int mainC = root[i].c;
                    
                    for(int j= 0;j<upper[mainR][mainC].size(); j++){
                        if(upper[mainR][mainC][j] == i){
                            //현재시점에서 맨끝까지 다음곳에 input한다
                            int sum =0;
                            for(int k = j; k< upper[mainR][mainC].size(); k++){
                                int ind = upper[mainR][mainC][k];
                                root[ind].r = nowR; root[ind].c = nowC;
                                
                                upper[nowR][nowC].push_back(ind);
                                sum++;
                            }
                            for(int i = 0;i<sum; i++){
                                upper[mainR][mainC].pop_back();
                            }
                            break;
                        }
                    }
                }
            }
            else if(arr[nowR][nowC] ==1){ //빨간색인 경우
                //이동
                int mainR = root[i].r; int mainC = root[i].c;
                
                for(int j= 0;j<upper[mainR][mainC].size(); j++){
                    if(upper[mainR][mainC][j] == i){
                        //현재시점에서 맨끝까지 다음곳에 input한다
                        for(int k = upper[mainR][mainC].size()-1; k>= j; k--){
                            int ind = upper[mainR][mainC][k];
                            upper[mainR][mainC].pop_back();
                            root[ind].r = nowR; root[ind].c = nowC; //초기화까지 한번에 다함
                            upper[nowR][nowC].push_back(ind);
                        }
                        break;
                    }
                }
            }
            else{ //흰색인 경우 (그냥 가는 경우)
//                printf("nowR:%d nowC:%d turn:%d \n",nowR, nowC, turn);
//                for(int i =0;i<n; i++){
//                    for(int j =0;j<n;j++){
//                        printf("%d ", upper[i][j].size());
//                    }
//                    printf("\n");
//                }
//
//                printf("\n");
//                printf("\n");
                int mainR = root[i].r; int mainC = root[i].c;
                
                for(int j= 0;j<upper[mainR][mainC].size(); j++){
                    if(upper[mainR][mainC][j] == i){
                        //현재시점에서 맨끝까지 다음곳에 input한다
                        int sum = 0;
                        for(int k = j; k< upper[mainR][mainC].size(); k++){
                            int ind = upper[mainR][mainC][k];
                            root[ind].r = nowR; root[ind].c = nowC;
                            
                            upper[nowR][nowC].push_back(ind);
                            sum++;
                        }
                        for(int i = 0;i<sum; i++){
                            upper[mainR][mainC].pop_back();
                        }
                        break;
                    }
                }
//                //말4개확인
//                printf("upper[nowR][nowC].size():%d\n", upper[nowR][nowC].size());
            }
            bool out1 = false;
            for(int i =0;i<n; i++){
                bool out2 = false;
                for(int j =0;j<n;j++){
                    if(upper[i][j].size()>=4){
                        result = turn;
                        out1 = true;
                        out2 = true;
                        break;
                    }
                }
                if(out2) break;
            }
            if(out1){
                check = true;
                break;
            }

        }
        if(check){
            break;
        }
        
    }
    printf("%d", result);
    return 0;
}
