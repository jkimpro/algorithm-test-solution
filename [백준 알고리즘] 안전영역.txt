#include <stdio.h>
#include <algorithm>
#include <queue>

using namespace std;
typedef struct loc {
	int r, c;
}Loc;
int dr[4] = {-1,0,1,0};
int dc[4] = { 0,1,0,-1 };

int n;
int result;
int q;

int arr[101][101];
int visit[101][101];
queue<Loc> loc;
bool canGo(int r, int c) {
	if (r > n || r<0 || c>n || c <0 ) { return false; }
	else if (visit[r][c] == true) { return false; }
	else if (arr[r][c] <= q) { return false; }
	else { return true; }
}
int main(){
	int maxNum = 0;
	result = 0;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &arr[i][j]);
			visit[i][j] = false;
			maxNum = max(maxNum, arr[i][j]);
		}
	}

	for (q = 0; q <= maxNum; q++) {
		int count = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (arr[i][j] <= q || visit[i][j] == true) { continue; }
				else {
					loc.push({ i,j });
					visit[i][j] = true;

					while (!loc.empty()) {
						Loc temp = loc.front();
						loc.pop();
						
						for (int k = 0; k < 4; k++) {
							if (canGo(temp.r + dr[k], temp.c + dc[k])) {
								visit[temp.r + dr[k]][temp.c + dc[k]] = true;
								loc.push({ temp.r + dr[k], temp.c + dc[k] });
							}
						}
					}
					count+=1;
				}
			}
		}

		result = max(result, count);
		//visit ÃÊ±âÈ­
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				visit[i][j] = false;
			}
		}
	}
	printf("%d", result);
	return 0;
} 