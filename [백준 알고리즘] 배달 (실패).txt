//배달문제 (틀림)
-> 컨셉은 그대로 유지하기.



#include <stdio.h>
#include <queue>

using namespace std;
typedef struct loc {
	int r, c;
	int count;
	int dir;
}Loc;

Loc start;
Loc target[2];
Loc maint;

queue <Loc> root;
queue <int> dirBack;

int dr[4] = { -1,0,1,0 };
int dc[4] = { 0,1,0,-1 };

bool visit[100][100];
char arr[100][100];
int results[4] = { -1,-1,-1,-1 };

int backup;
int mainresult[2] = {-1,-1};

int result;
int n, m;

bool canGo(int r, int c) {
	if (r < 0 || r >= n || c < 0 || c >= m) {
		return false;
	}
	else if (arr[r][c] == '#') {
		return false;
	}
	else if (visit[r][c] == true) {
		return false;
	}
	else {
		return true;
	}
}

int main() {
	int tarCount = 0;
	result = -1; 

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		scanf("%s", arr[i]);
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == 'S') {
				start.r = i;
				start.c = j;
				start.count = 0;
				start.dir = -1;
		//		printf("start r:%d start c:%d\n", start.r, start.c);
			}
			else if (arr[i][j] == 'C') {
				target[tarCount].r = i;
				target[tarCount].c = j;
				target[tarCount].count = 0;
			//	printf("target r:%d target c:%d\n", target[tarCount].r, target[tarCount].c);
				tarCount++;
				
			}
		}
	}

	for (int i = 0; i < 4; i++) {
		if (i == 0) {
			root.push(start);
			maint = target[0];
			visit[start.r][start.c] = true;
		}
		else if (i == 1) {	//target1 ->2
			target[0].dir = backup;
			root.push(target[0]);
			maint = target[1];
			visit[target[0].r][target[0].c] = true;
		}
		else if (i == 2) {
			root.push(start);
			maint = target[1];
			visit[start.r][start.c] = true;
		}
		else {
			target[1].dir = backup;
			root.push(target[1]);
			maint = target[0];

			visit[target[1].r][target[1].c] = true;
		}

		//root 실시 개수 세기
		while (!root.empty()) {
			Loc temp = root.front();
			root.pop();
		//	printf("maintr:%d maintc:%d\n", maint.r, maint.c);

			if (temp.r == maint.r && temp.c == maint.c) {
				results[i] = temp.count;
				backup = temp.dir;
				break;
			}
			else {
				for (int dir = 0; dir < 4; dir++) {
					if (temp.dir != dir && canGo(temp.r + dr[dir], temp.c + dc[dir])) {
						visit[temp.r + dr[dir]][temp.c + dc[dir]] = true;
						root.push({ temp.r + dr[dir], temp.c + dc[dir], temp.count+1, dir});
					}
				}
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				visit[i][j] = false;
			}
		}
		while (!root.empty()) {
			root.pop();
		}
	}

	if (results[0] != -1 && results[1] != -1) {
		mainresult[0] = results[0] + results[1];
	}
	if (results[2] != -1 && results[3] != -1) {
		mainresult[1] = results[2] + results[3];
	}
	bool got = false;
	if (mainresult[0] != -1) {
		result = mainresult[0];
		got = true;
	}
	if (mainresult[1] != -1) {
		if (got == false) {
			result = mainresult[1];
		}
		else {
			result = min(result, mainresult[1]);
		}
	}

	printf("%d", result);

	return 0;
}