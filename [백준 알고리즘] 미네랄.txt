//미네랄

//1. 클러스터의 개념은 하나의 덩어리라는 뜻 (모두 붙어있는 덩어리)
//2. 하나의 클러스터를 vector에 담아버리고, 기존에 있던 곳들은 '.'로 초기화 시킨다.
//3. vector 에 담겨져 있는 값들을 통해 drag할 범위를 찾는다.
//4. drag 한후 다음 과정을 실행
//5. visit 은 이제 왠만하면 false 로 초기화 할것 (리눅스 환경과는 많이 다름 mac 기준)

#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;
typedef struct cell{
    int r, c;
}Cell;

vector<int> root;

int rdir[4] = {-1,0,1,0};
int cdir[4] = {0,1,0,-1};

int r,c;
char arr[101][101];
int mineral =0;
int n;

void clusterDrag(){
    bool visit[101][101];
    for(int i =0;i<r; i++){
        for(int j =0;j<c;j++){
            visit[i][j] = false;
        }
    }
    
    for(int i =0;i<r; i++){
        for(int j =0; j<c; j++){
            bool isGround = false;
            if(arr[i][j] == 'x' && visit[i][j] == false){
                
                vector<Cell> cluster;
                queue<Cell> q;
                q.push({i,j});
                
                arr[i][j] = '.';
                visit[i][j] = true;
                cluster.push_back({i,j});
                
                while(!q.empty()){
                    Cell temp = q.front();
                    q.pop();
                    
                    if(temp.r == r-1){
                        isGround = true;
                    }
                    
                    for(int dir = 0; dir<4; dir++){
                        int nowR = temp.r + rdir[dir];
                        int nowC = temp.c + cdir[dir];
                        if(0<=nowR && nowR <r && 0<=nowC && nowC<c
                           && arr[nowR][nowC] =='x' && visit[nowR][nowC] == false){
                            arr[nowR][nowC] = '.';
                            visit[nowR][nowC] = true;
                            q.push({nowR, nowC});
                            cluster.push_back({nowR, nowC});
                        }
                    }
                }
                if(cluster.size() == mineral){
                    //복구
                    for(int i =0;i<cluster.size(); i++){
                        arr[cluster[i].r][cluster[i].c] = 'x';
                    }
                    return;
                }
                else{
                    if(isGround){
                         for(int i =0;i<cluster.size(); i++){
                             arr[cluster[i].r][cluster[i].c] = 'x';
                         }
                        continue;
                    }
                    else{
                        bool crash = false;
                        int down = 1;
                        //클러스터 하나씩 내리기
                        while(1){
                            for(int k =0; k<cluster.size(); k++){
                                int nowR = cluster[k].r +down;
                                if(nowR >= r || arr[nowR][cluster[k].c] =='x'){
                                    crash = true;
                                    break;
                                }
                            }
                            if(crash){
                                down-=1;
                                break;
                            }
                            down++;
                        }
                        for(int k =0; k<cluster.size(); k++){
                            arr[cluster[k].r +down][cluster[k].c] = 'x';
                        }
                        return;
                    }
                }
            }
        }
    }
}
int main(){
    scanf("%d %d", &r, &c);
    
    for(int i =0;i<r; i++){
        string tmp;
        cin >> tmp;
        for(int j =0;j<tmp.size(); j++){
            arr[i][j] = tmp[j];
            if(arr[i][j] == 'x'){
                mineral++;
            }
        }
    }
    
    scanf("%d", &n);
    for(int num =0;num<n; num++){
        int tmp;
        scanf("%d", &tmp);
        tmp = r-tmp;
        if(num%2 ==0){ //왼 -> 오
            for(int i=0; i<c; i++){
                if(arr[tmp][i] == 'x'){
                    mineral-=1;
                    arr[tmp][i] = '.';
                    clusterDrag();
                    break;
                }
            }
        }
        else{ //오 -> 왼
            for(int i=c-1; i>=0; i--){
                if(arr[tmp][i] == 'x'){
                    mineral-=1;
                    arr[tmp][i] = '.';
                    clusterDrag();
                    break;
                }
            }
        }
        
        
    }
    
    for(int i =0; i<r; i++){
        for(int j =0;j<c; j++){
            printf("%c", arr[i][j]);
        }
        printf("\n");
    }
    
    
    return 0;
}

