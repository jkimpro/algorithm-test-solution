//암호코드

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <queue>

using namespace std;

char password[700][1000];

int steps[10][4] = {
	{3,2,1,1}, {2,2,2,1}, {2,1,2,2},
	{1,4,1,1} ,{1,1,3,2}, {1,2,3,1},
	{1,1,1,4}, {1,3,1,2}, {1,2,1,3},
	{3,1,1,2}
};

int binCol[16][4] = {
	{0,0,0,0}, {0,0,0,1},{0,0,1,0}, {0,0,1,1}, //1,2,3
	{0,1,0,0}, {0,1,0,1}, {0,1,1,0}, {0,1,1,1}, //4,5,6,7
	{1,0,0,0}, {1,0,0,1}, {1,0,1,0}, {1,0,1,1},//8,9,A,B
	{1,1,0,0}, {1,1,0,1}, {1,1,1,0}, {1,1,1,1}//C,D,E,F
};

int lastNum;

int main()
{
	int real;
	scanf("%d", &real);

	for (int testcase = 1; testcase <= real; testcase++)
	{
		int n, m;
		int binNum[4] = {0,0,0,0};
		vector <int> normal;

		scanf("%d %d", &n, &m);
		
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				scanf("%c", &password[i][j]);
			}
		}

		for (int i = 0; i < n; i++)
		{
			int flag = 0;
			queue <int> bin;
			
			for (int j = 0; j < m; j++)
			{
				int temp;
				if (password[i][j] != '0')
				{
					bin.push(0);
					for (int k = j; ; k++)
					{
						if (password[i][k] >= 'A' && password[i][k] <= 'Z')
						{
							temp = password[i][k] - 'A';
						}
						else
						{
							temp = password[i][k] - '0';
						}

						for (int num = 0; num < 4; k++)
						{
							bin.push(binCol[temp][num]);
						}

						if (password[i][k] == '0' || (k + 1) == m) {
							j = k + 1;
							break;
						}
					}


					//queue 에 있는 것들 꺼내서 연산하기
					int flag = 0;
					int zeroFlag = 0;
					int oneFlag = 0;
					int finalFlag = 0;

					int size = bin.size();

					for(int count =0; count<size+1; count++)
					{
						int num = -1;
						if (!bin.empty())
						{
							num = bin.front();
							bin.pop();
						}

						if ((zeroFlag == 1 && oneFlag == 1 &&finalFlag ==1)|| num == -1) {
							//해결하고 나머지 옵션 0로 초기화
							for (int getAll = 0; getAll < 10; getAll++)
							{
								int flag1 = 0, flag2 = 0, flag3 = 0, flag4 = 0;
								if (binNum[0] % steps[getAll][0]== 0) { flag1 = 1; }
								if (binNum[1] % steps[getAll][1]== 0) { flag2 = 1; }
								if (binNum[2] % steps[getAll][2] == 0) { flag3 = 1; }
								if (binNum[3] % steps[getAll][3] == 0) { flag4 = 1; }
							
								if (flag1 == 1 && flag2 == 1 && flag3 == 1 && flag == 1)
								{
									normal.push_back(getAll);
									break;
								}
							}
							zeroFlag = 0;
							oneFlag = 0;
							finalFlag = 0;
							for (int getAll = 0; getAll < 4; getAll++) { binNum[getAll] = 0; }
						}
						else if (zeroFlag == 0 && num == 0)	{binNum[0] += 1;}
						else if (zeroFlag == 1 && num == 0) { oneFlag = 1; binNum[2] += 1; }
						else if (oneFlag == 0 && num == 1) { zeroFlag = 1; binNum[1] += 1; }
						else if (oneFlag == 1 && num == 1) {
							binNum[3] += 1;
							if (!bin.empty())
							{
								if (bin.front() == 0) { finalFlag == 1; }
							}
						}
					}

					//연산



				}

				

			}
		}

		
	}

	return 0;
}