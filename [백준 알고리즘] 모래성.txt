//모래성
//시뮬레이션 문제의 대표 유형 (첫시도 시뮬레이션 실패)
//while문을 통해 전체를 조회하거나, root에 특정한 값들만 for문 돌리는것은 어리석은 행위임
//(while문 안에서 시도횟수별로 지우는 방식)

//현재로직
//1. dotSum / arr 초기화
//2. queue 에 현재턴을 포함하여 '.'으로 변환하는 좌표값 집어넣기
//3. while(queue) 를 통해서 그때그때 8 방향조회 후
//4. 조회된 곳의 dotSum +=1 을 실시
//5. dotSum[i][j] == arr[i][j] 를 한후 arr[i][j] = -1 처리
//6. queue에 다시 {i,j, temp.count+1} 넣는다.



//성공본
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

typedef struct cell{
    int r,c;
    int count;
}Cell;
int rdir[8] = {-1,-1,0,1,1,1,0,-1};
int cdir[8] = {0,1,1,1,0,-1,-1,-1};

int n,m;
int sum =0;
int result =0;
int arr[1001][1001];
int dotSum[1001][1001];

queue<Cell> root;

int main(){
    scanf("%d %d", &n, &m);
    
    for(int i =0;i<n; i++){
        string temp;
        cin >> temp;
        for(int j =0;j<m; j++){
            if(temp[j] == '.'){
                arr[i][j] = -1;
                dotSum[i][j] = 0;
            }
            else{
                arr[i][j] = temp[j] -'0';
                dotSum[i][j] = 0;
            }
        }
    }
    
    for(int i =0; i<n; i++){        //dot 이 아닌 지점에 현재 무너짐 dot 개수 체크함
        for(int j =0;j<m; j++){
            if(arr[i][j] == -1){
                for(int dir =0;dir<8; dir++){
                    int nowR = i + rdir[dir];
                    int nowC = j + cdir[dir];
                    if(0<=nowR && nowR<n && 0<=nowC && nowC<m && arr[nowR][nowC] != 0){
                        dotSum[nowR][nowC]+=1;
                    }
                }
            }
        }
    }
    for(int i =0;i<n; i++){
        for(int j=0; j<m; j++){
            if(dotSum[i][j] >= arr[i][j] && arr[i][j] !=-1){
                root.push({i,j,1});
                arr[i][j] = -1;
            }
        }
    }

    while(!root.empty()){
        Cell temp = root.front();
        root.pop();
        
        result = max(result,temp.count);
        
        for(int i =0; i<8; i++){
            int nowR = temp.r + rdir[i];
            int nowC = temp.c + cdir[i];
            dotSum[nowR][nowC] +=1;
            if(dotSum[nowR][nowC] == arr[nowR][nowC]){
                root.push({nowR,nowC, temp.count+1});
            }
        }
    }
    printf("%d", result);
    return 0;
}



//시간초과본
//모래성
//#include <iostream>
//#include <cstdio>
//#include <vector>
//#include <queue>
//
//using namespace std;
//
//typedef struct cell{
//    int r,c;
//    char val;
//    bool disable;
//}Cell;
//int rdir[8] = {-1,-1,0,1,1,1,0,-1};
//int cdir[8] = {0,1,1,1,0,-1,-1,-1};
//
////그가 만든 모래성을 2차원 격자단위로 만들었으며, 각 격자마다 튼튼함의 정도를 다르게 해서 성을 만들었다. 이 튼튼함은 1부터 9 사이의 숫자로 표현될 수 있다. 이 튼튼함은,
////자기 격자 주변의 8방향 (위 아래 왼쪽 오른쪽, 그리고 대각선) 을 봐서 모래성이 쌓여있지 않은 부분의 개수가 자기 모래성의 튼튼함보다 많거나 같은 경우 파도에 의해서 무너질 수 있음을 의미한다.
////그 이외의 경우는 파도가 쳐도 무너지지 않는다. 모래성이 무너진 경우, 그 격자는 모래성이 쌓여있지 않은 것으로 취급한다.
//int n,m;
//int sum =0;
//int result =0;
//char arr[1001][1001];
//
//vector<Cell> root;
//
//int main(){
//    scanf("%d %d", &n, &m);
//
//    for(int i =0;i<n; i++){
//        string temp;
//        cin >> temp;
//        for(int j =0;j<m; j++){
//            arr[i][j] = temp[j];
//
//            if(arr[i][j] !='.'){
//                root.push_back({i,j, arr[i][j], false});
//                sum++;
//            }
//        }
//    }
//
//    while(1){
//        int fall =0;
//        //simulation;
//
//        for(int i =0; i<root.size(); i++){
//            if(root[i].val == '.'){continue;}
//            int dotSum =0;
//            for(int dir =0;dir<8; dir++){
//                int nowR = root[i].r + rdir[dir];
//                int nowC = root[i].c + cdir[dir];
//                if(0<=nowR && nowR<n && 0<=nowC && nowC<m && arr[nowR][nowC] =='.'){
//                    dotSum++;
//                }
//            }
//            if((root[i].val -'0')<=dotSum){
//                root[i].val = '.';
//            }
//        }
//
//        //arr 재 초기화 시키기
//        for(int i =0;i<root.size(); i++){
//            if(root[i].disable == true){continue;}
//            if(root[i].val == '.' && root[i].disable == false){
//                arr[root[i].r][root[i].c] = '.';
//                root[i].disable = true;
//                fall++;
//            }
//        }
//        if(fall ==0){
//            break;
//        }
//        result++;
//    }
//    printf("%d", result);
//    return 0;
//}
//
