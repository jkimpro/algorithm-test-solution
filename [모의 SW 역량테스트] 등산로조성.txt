//https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PoOKKAPIDFAUq#


#include <stdio.h>
#include <vector>
#include <algorithm>

using namespace std;

typedef struct location{
	int x, y;
}Location;

Location loc[5];
int arr[8][8];

int dfs(int x, int y, int leng)
{
	int max[4] = {0,0,0,0};
	int output =0;

	if ((y + 1) < leng)
	{
		if (arr[x][y + 1] < arr[x][y])
		{
			max[0] = dfs(x, y + 1, leng) + 1;
		}
	}
	if ((y - 1) >= 0)
	{
		if (arr[x][y - 1] < arr[x][y])
		{
			max[1] = dfs(x, y - 1, leng) + 1;
		}
	}
	if ((x + 1) < leng)
	{
		if (arr[x + 1][y] < arr[x][y])
		{
			max[2] = dfs(x+1,y, leng) + 1;
		}
	}
	if ((x - 1) >= 0)
	{
		if (arr[x-1][y] < arr[x][y])
		{
			max[3] = dfs(x-1, y, leng) + 1;
		}
	}
	
	for (int i = 0; i < 4; i++)
	{
		if (max[i] > output)
		{
			output = max[i];
		}
	}
	return output;

}


int main()
{
	int test = 0;
	int count = 0;
	scanf("%d", &test);

	for (int testcase = 1; testcase <= test; testcase++)
	{
		int leng;
		int k;
		int max = -1;
		int maxLocCount = 0;
		int maxWay = 0;

		scanf("%d %d", &leng, &k);

		for (int j = 0; j < leng; j++)
		{
			for (int t = 0; t < leng; t++)
			{
				scanf("%d", &arr[j][t]);
				if (arr[j][t] > max)
				{
					max = arr[j][t];
				}
			}
		}

		//최대인 곳의 좌표 찾기.
		for (int j = 0; j < leng; j++)
		{
			for (int t = 0; t < leng; t++)
			{
				if (max == arr[j][t])
				{
					loc[maxLocCount].x = j;
					loc[maxLocCount].y = t;
					maxLocCount++;
				}
			}
		}

		for (int w = 0; w < leng; w++)
		{
			for (int h = 0; h < leng; h++)
			{
				for (int j = 1; j <= k; j++)
				{
					arr[w][h] -= j;

					//시작은 이곳에서 부터.
					for (int m = 0; m < maxLocCount; m++)
					{
						int temp;
						if (w == loc[m].x && h == loc[m].y)
						{
							continue;
						}
						temp = dfs(loc[m].x, loc[m].y, leng) + 1;
						if (temp > maxWay)
						{
							maxWay = temp;
						}
					}
					arr[w][h] += j;
				}
			}
		}
		

		printf("#%d %d\n", testcase, maxWay);

		count++;
	}
	return 0;
}