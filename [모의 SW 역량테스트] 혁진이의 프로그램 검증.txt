//혁진이의 프로그램 검증
//분명 로직은 똑같은데 안되는 좆 같은 문제였음

//1. 풀이법 value 별 방향 별 visit만들기
//2. root 돌때는 무조건! 무ㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜ조건! 새로운 변수에 할당하고 그 변수를 활용하기
//3. 2번을 안지키면 괴랄한 현상이 일어남.진짜 지랄 발광같은 현상이 벌어짐(직접 접근을 피하기)
//4. scanf printf 사용 안할시 ios::sync_with_stdio(false); cin.tie(0); 사용하기

#include<iostream>
#include <queue>
#include <memory.h>

using namespace std;
typedef struct cell{
    int r, c;
    int val;
    int dir;
}Cell;

int t, test , r, c;
int rdir[] = {-1,0,1,0} ,cdir[] = {0,1,0,-1} , visit[4][16][21][21];
char arr[21][21];
queue <Cell> root;

int main(){
    
    ios::sync_with_stdio(false); cin.tie(0);
    
    cin >> test;
    
    for(t = 1; t<=test; t++){
        
        cin >> r >> c;
        bool able = false;
        
        for(int i =0;i<r; i++){
            cin >> arr[i];
            for(int j =0;j<c; j++){
                if(arr[i][j] == '@'){able = true;}
            }
        }
        
        if(able) root.push({0,0,0,1});
        
        visit[1][0][0][0] = t;
        
        int f = 0;
        
        while(root.size()){
        
            int thisR = root.front().r;
            int thisC = root.front().c;
            int thisDir = root.front().dir;
            int thisVal = root.front().val;
         //   printf("thisR:%d thisC:%d val:%c\n", thisR, thisC, arr[thisR][thisC]);
            root.pop();
            
            if(arr[thisR][thisC] == '<'){thisDir = 3;}
            else if(arr[thisR][thisC] == '>'){thisDir= 1;}
            else if(arr[thisR][thisC] == '^'){thisDir= 0;}
            else if(arr[thisR][thisC] == 'v'){thisDir= 2;}
            else if(arr[thisR][thisC] == '_'){thisDir = thisVal==0 ? 1:3;}
            else if(arr[thisR][thisC] == '|'){thisDir = thisVal==0 ? 2:0;}
            else if(arr[thisR][thisC] == '?'){
                
                for(int i =0;i<4; i++){
                    //minus 처리
                    int nowR = (thisR + rdir[i]+r)%r;
                    int nowC = (thisC + cdir[i]+c)%c;
                    //printf("fuck thisR:%d thisC:%d val: %c val:t\n", nowR, nowC, arr[now] visit[i][thisVal][thisR][thisC]);

                    if(visit[i][thisVal][nowR][nowC] == t){continue;}
                    visit[i][thisVal][nowR][nowC]= t;
                    root.push({nowR, nowC, thisVal, i});
                }
                continue;
            }
            else if(arr[thisR][thisC]== '@'){
                f =1;
                while(root.size()){root.pop();}
                break;
            }
            else if(arr[thisR][thisC]>='0' && arr[thisR][thisC]<='9'){thisVal = arr[thisR][thisC] -'0';}
            else if(arr[thisR][thisC] =='+'){thisVal = (thisVal+1)%16;}
            else if(arr[thisR][thisC] == '-'){thisVal = (thisVal+15)%16;}
            
            thisR = (thisR + rdir[thisDir]+r)%r;
            thisC = (thisC + cdir[thisDir]+c)%c;
            if(visit[thisDir][thisVal][thisR][thisC] == t){continue;}
            
            visit[thisDir][thisVal][thisR][thisC] = t;
            root.push({thisR, thisC, thisVal, thisDir});
        }
        
        if(f){
            cout << "#" << t << " YES"<< endl;
        }
        else{
            cout << "#" << t << " NO"<< endl;
        }
    }
    
    return 0;
}
