//카탄의 개척자

//풀이법
//
//1. 한바퀴 돌때마다 round를 갱신해줌, 6개의 꼭지점에서는 다음 바퀴의 3개 요소에 영향을 미친다는 점을 고려함
//2. 이런식으로 10000까지 돎
#include <iostream>
#include <cstdio>
#include <vector>

using namespace std;

vector <int> root;
vector <int> round[10000];
vector <int> exVal[10000];

int result;
int arr[6] = {2,3,4,5,2,3};
int sum[6] = {0,0,0,0,0,0};
int rowNum = 2;
int startInd =1;

int ableVal(int ind){
    int minVal = 9;
    int minCount = 99999;
    int check[6] = {1, 1, 1, 1, 1, 1};
    
    for(int i =0;i<exVal[ind].size();i++){
        check[exVal[ind][i]] = 0;
    }
    
    for(int i =1; i<6; i++){
        if(check[i] == 1){ //check가 true일 경우
            if(minCount > sum[i]){
                minCount = sum[i];
                minVal = i;
            }
        }
    }
    return minVal;
}
int main(){
    int test =0;
    scanf("%d", &test);
    
    round[0].push_back(1);
    root.push_back(1);
    sum[1]+=1;
    
    for(int i =0;i<6;i++){
        round[1].push_back(arr[i]);
        root.push_back(arr[i]);
        sum[arr[i]]+=1;
    }
    
    while(root.size() <=10001){
        vector<int> inside;

        int tag = rowNum-1; //이게 이전 index 이며 term 임
        int toss = 0;
        
        for(int i =1;i <= round[tag].size(); i++){
            if(i == round[tag].size()){    //마지막일 경우
                exVal[toss].push_back(round[tag][i-1]);
                toss+=1;
                exVal[toss].push_back(round[tag][i-1]);
            }
            else if(i%tag == 0){ //term에 도달 경우
                //   printf("term:%d i:%d ", tag, i);
                for(int j = toss;j<toss+3; j++){
                    exVal[j].push_back(round[tag][i-1]);
                }
                toss+=2;
            }
            else{
                exVal[toss].push_back(round[tag][i-1]);
                toss+=1;
                exVal[toss].push_back(round[tag][i-1]);
            }
        }
        
        for(int i = 1; i<=rowNum*6; i++){
            //마지막 값 리턴
            exVal[i-1].push_back(root[root.size()-1]);
            
            if(i== rowNum*6){
                exVal[i-1].push_back(round[rowNum][0]);
            }
            
            int tmp =ableVal(i-1);
            sum[tmp]+=1;                //check하기.
            
            inside.push_back(tmp);
            round[rowNum].push_back(tmp);
            root.push_back(tmp);
        }
        
        for(int i =0; i<10000; i++){
            exVal[i].clear();
        }
        rowNum++;
    }
    
    for(int t = 0; t< test; t++){
        int tmp;
        scanf("%d", &tmp);
        
        printf("%d\n", root[tmp-1]);
    }
    
    return 0;
}
