#include <stdio.h>
#include <queue>

using namespace std;

typedef struct loc {
	int r, c;
	int count;
}Loc;

int dr[2] = {1,0};
int dc[2] = { 0,1 };
int n, m;
int item;
int pro;

int result;
int arr[101][101];

bool canGo(int r, int c) {
	if (r < 0 || r >= n || c<0 || c>=m) {
		return false;
	}
	else if (arr[r][c] == 2) {
		return false;
	}
	else {
		return true;
	}
}
int main() {
	
	result = 0;
	scanf("%d %d %d %d", &n, &m, &item, &pro);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			arr[i][j] = 0;
		}
	}

	for (int i = 0; i < item; i++) {
		int r, c;
		scanf("%d %d", &r, &c);
		r -= 1; c -= 1;
		arr[r][c] = 1;
		//아이템
	}
	for (int j = 0; j < pro; j++) {
		int r, c;
		scanf("%d %d", &r, &c);
		r -= 1; c -= 1;
		arr[r][c] = 2;
		//장애물
	}
	
	queue <Loc> root;
	root.push({ 0,0,0 });

	while (!root.empty()) {
		Loc temp = root.front();
		root.pop();

		if (arr[temp.r][temp.c] == 1) {
			temp.count += 1;
		}
		if (temp.r == n - 1 && temp.c == m-1 && temp.count == item) {
			result += 1;
		}
		else {
			for (int dir = 0; dir < 2; dir++) {
				if (canGo(temp.r + dr[dir], temp.c + dc[dir])) {
					root.push({ temp.r + dr[dir], temp.c + dc[dir], temp.count});
				}
			}
		}
	}

	printf("%d", result);

	return 0;
}