//인구이동
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <queue>

using namespace std;
typedef struct way {
	int r, c;
}Way;

int rMove[4] = {-1,0,1,0};
int cMove[4] = { 0,1,0,-1 };

int n, l, r;

int arr[51][51];
bool visit[51][51];
bool visit2[51][51];

queue <Way> way;
vector <Way> record;

bool check(int realR, int realC, int row, int col) {
	if (row >= n || row < 0 || col >= n || col < 0) {return false;}
	else if (abs(arr[realR][realC] - arr[row][col]) < l || abs(arr[realR][realC] - arr[row][col]) > r) {return false;}
	else {return true;}
}
bool canGo(int realR, int realC, int row, int col) {
	if (row >= n || row < 0 || col >= n || col < 0) {return false;}
	else if (visit[row][col] == true) {return false;}
	else if (abs(arr[realR][realC] - arr[row][col]) < l || abs(arr[realR][realC] - arr[row][col]) > r) {return false;}
	else {return true;}
}
int main() {
	int zeroFlag = 0;
	scanf("%d %d %d", &n, &l, &r);

	for (int i = 0; i < n; i++){
		for (int j = 0; j < n; j++){
			scanf("%d", &arr[i][j]);
			visit[i][j] = false;
			visit[i][j] = false;
		}
	}

	for (int day = 1; ; day++) {
		int replayFlag = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (visit[i][j] == true) {
					continue;
				}
				else {
					int sum = 0;
					int div = 0;

					Way temp = { i,j };
					way.push(temp);
					visit[temp.r][temp.c] = true;
					
					while (!way.empty()) {
						Way go = way.front();
						way.pop();
					
						visit[go.r][go.c] = true;
						record.push_back({ go.r,go.c });
						sum += arr[go.r][go.c];

						for (int k = 0; k < 4; k++) {
							if (canGo(go.r, go.c, go.r + rMove[k], go.c + cMove[k])) {
								int row = go.r + rMove[k];
								int col = go.c + cMove[k];
			
								way.push({row,col});
								visit[row][col] = true;
								visit2[row][col] = true;
								zeroFlag = 1;
							}
						}
					}

					//다 나눠서 넣어둠
					div = (sum / record.size());
					if (record.size() != 1) {
						for (int k = 0; k < record.size(); k++) {
							arr[record[k].r][record[k].c] = div;
						}
					}
					record.clear();
				}
			}
		}

		//방문 하지 않은 곳 동서남북 확인
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (visit2[i][j] == false) {
					for (int k = 0; k < 4; k++) {
						if (check(i, j, i + rMove[k], j + cMove[k])) {		//갈수 있다는 말은 바뀌어야한다는 여지가 있다는 뜻
							replayFlag = 1;
						}
					}
				}
				visit[i][j] = false;
				visit2[i][j] = false;
			}
		}
		
		if (replayFlag == 0) {
			if (zeroFlag == 0) {
				printf("0");
			}
			else {
				printf("%d", day);
			}
			break;
		}
	}

	return 0;
}