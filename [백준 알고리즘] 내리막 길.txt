// 내리막 길

//dfs return 있게 만든 케이스 (맞음)
#include <iostream>
#include <cstdio>

using namespace std;

int n,m;
int arr[501][501];
int dp[501][501];

int rdir[4] = {-1,0,1,0};
int cdir[4] = {0,1,0,-1};

int dfs(int r, int c){
    if(r == n-1 && c==m-1){
        return 1;
    }
    else{
        if(dp[r][c] ==-1){
            dp[r][c] = 0;
            for(int i =0; i<4; i++){
                int nowR = r+rdir[i];
                int nowC = c+cdir[i];
                
                if(nowR>=0 && nowR<n && nowC>=0 && nowC<m){
                    if(arr[r][c] > arr[nowR][nowC]){
                        dp[r][c] += dfs(nowR, nowC);
                    }
                }
            }
        }
        
        return dp[r][c];
    }
}
int main(){
    int result =0;
    scanf("%d %d", &n, &m);
    for(int i =0;i< n; i++){
        for(int j =0;j<m; j++){
            scanf("%d", &arr[i][j]);
            dp[i][j] =-1;
        }
    }
    result = dfs(0,0);
    
    printf("%d", result);
}










//dfs return 없이 만든 버전 (시간 초과)
#include <iostream>
#include <cstdio>

using namespace std;

int n,m;
int arr[501][501];
int dp[501][501];

int rdir[4] = {-1,0,1,0};
int cdir[4] = {0,1,0,-1};
int result =0;

void dfs(int r, int c){
    if(r == n-1 && c==m-1){
        result +=1;
    }
    else{
//        if(dp[r][c] ==-1){
//            dp[r][c] = 0;
            for(int i =0; i<4; i++){
                int nowR = r+rdir[i];
                int nowC = c+cdir[i];
                
                if(nowR>=0 && nowR<n && nowC>=0 && nowC<m){
                    if(arr[r][c] > arr[nowR][nowC]){
                        dfs(nowR, nowC);
                    }
                }
            }
  //      }
        
    }
}
int main(){
    scanf("%d %d", &n, &m);
    for(int i =0;i< n; i++){
        for(int j =0;j<m; j++){
            scanf("%d", &arr[i][j]);
          //  dp[i][j] =-1;
        }
    }
    
    dfs(0,0);
    
    printf("%d", result);
}
