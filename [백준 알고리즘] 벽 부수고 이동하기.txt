#include <stdio.h>
#include <algorithm>
#include <queue>

using namespace std;

typedef struct loc {
	int r, c;
	int count;
	bool isBroke;
}Loc;

int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};

int result;

char map[1001][1001];
int arr[1001][1001];
int visit[2][1001][1001];

queue <Loc> loc;
int n, m;

bool check(Loc temp) {
	if (temp.r < 0 || temp.r >= n || temp.c < 0 || temp.c >= m) { return false; }
	if (arr[temp.r][temp.c] == 1) {
		return true;
	}
	return false;
}
bool canGo(int r, int c,bool option) {
	if (r < 0 || r >= n || c < 0 || c >= m) {return false;}
	if (option == true && visit[1][r][c] == true) { return false; }
	if (option == false && visit[0][r][c] == true) {return false;}
	if (arr[r][c] == 1) { return false; }
	return true;
}
int main() {
	result = 0;
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {scanf("%s", map[i]);}
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			arr[i][j] = map[i][j] - '0';
		}
	}


	loc.push({ 0,0,1, false });
	visit[0][0][0] = true;

	while (!loc.empty()) {
		Loc temp = loc.front();
		loc.pop();

		if (temp.r == n-1 && temp.c == m-1) {
			result = temp.count;
			break;
		}

		

		for (int dir = 0; dir < 4; dir++) {
			Loc go = { temp.r + dr[dir], temp.c + dc[dir] , temp.count + 1, temp.isBroke};
			
			if (temp.isBroke == true) {
				if (canGo(temp.r + dr[dir], temp.c + dc[dir], temp.isBroke)) {
					loc.push(go);
					visit[1][go.r][go.c] = true;
				}
			}

			if (temp.isBroke == false) {
				if (canGo(temp.r + dr[dir], temp.c + dc[dir], temp.isBroke)) {
					loc.push(go);
					visit[0][go.r][go.c] = true;
				}
				if (check(go)) {
					go.isBroke = true;
					loc.push(go);
					visit[1][go.r][go.c] = true;
				}
			}
		}
	}
	
	if (result == 0) { printf("-1"); }
	else {
		printf("%d", result);
	}
	return 0;
}