#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

typedef struct machine {
	int r, c;
}Machine;

typedef struct dust {
	int r, c;
	int num;
}Dust;

int rdir[4] = { -1,0,1,0 };
int cdir[4] = { 0,1,0,-1 };


int tempRdir[2][4] = { { 0,-1,0,1 },
									{ 0,1,0,-1 } };
int tempCdir[2][4] = { { 1,0,-1,0 },
									{ 1,0,-1,0 } };
int result;
int r, c, t;

vector <Machine> root;
queue <Dust> dustRoot;

int arr[51][51];
int layer[51][51];


bool canGo(int row, int col) {
	if (row<0 || row >= r || col<0 || col >= c) {
		return false;
	}
	else if (arr[row][col] == -1) {
		return false;
	}
	else {
		return true;
	}
}
int main() {

	result = -1;
	scanf("%d %d %d", &r, &c, &t);

	for (int i = 0; i<r; i++) {
		for (int j = 0; j < c; j++) {
			scanf("%d", &arr[i][j]);
			layer[i][j] = 0;
			if (arr[i][j] == -1) {
				root.push_back({ i,j });
			}
			else if (arr[i][j] != 0) {
				dustRoot.push({ i,j,arr[i][j] });
			}
		}
	}

	for (int time = 0; time <t; time++) {

		int size = 0;
		//초기 
		result = 0;
		
		size = dustRoot.size();

		for (int i = 0; i<size; i++) {
			Dust temp = dustRoot.front();
			dustRoot.pop();

			int count = 0;
			for (int dir = 0; dir<4; dir++) {
				if (canGo(temp.r + rdir[dir], temp.c + cdir[dir])) {
					layer[temp.r + rdir[dir]][temp.c + cdir[dir]] += arr[temp.r][temp.c] / 5;
					count += arr[temp.r][temp.c] / 5;
				}
			}

			layer[temp.r][temp.c] += (arr[temp.r][temp.c] - count);
		}

		//공기정화
		for (int i = 0; i< root.size(); i++) {
			int nowR = root[i].r;
			int nowC = root[i].c;
			int temp = 0;

			for (int dir = 0; dir<4; dir++) {
				while (canGo(nowR+tempRdir[i][dir], nowC+tempCdir[i][dir])) {	//갈수 있을 때까지 간다.
					int side = layer[nowR][nowC];
					layer[nowR][nowC] = temp;
					temp = side;
					nowR += tempRdir[i][dir];
					nowC += tempCdir[i][dir];		
				//	printf("nowR: %d nowC: %d temp: %d\n", nowR, nowC, temp);
				}
			}
			layer[nowR][nowC] = temp;
			//printf("nowR: %d nowC: %d temp: %d\n", nowR, nowC, temp);

		}	
		
		
		//먼지개수 채우기
		for (int i = 0; i<r; i++) {
			for (int j = 0; j<c; j++) {
				result += layer[i][j];
				if (layer[i][j] != 0) {
					dustRoot.push({ i,j,layer[i][j] });
				}
				arr[i][j] = layer[i][j];
				layer[i][j] = 0;
			}
		}
		arr[root[0].r][root[0].c] = -1;
		arr[root[1].r][root[1].c] = -1;
		
	}

	printf("%d", result);
	return 0;
}