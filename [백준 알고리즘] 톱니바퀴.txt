//톱니바퀴
#include <stdio.h>
#include <queue>

using namespace std;

typedef struct way {
	int num;
	int dir;
}Way;
char map[4][9];
int arr[5][9];
int state[5][2];
int result;
int k;

queue <Way> root;

int main(){
	result = 0;
	for (int i = 0; i < 4; i++) {
		scanf("%s", map[i]);
	}
	for (int i = 1; i <=4; i++) {
		for (int j = 0; j < 8; j++) {
			arr[i][j] = map[i - 1][j] - '0';
		}
	}
	scanf("%d", &k);

	//0 N극
	//1 S극

	for (int i = 0; i < k; i++) {
		Way temp;
		scanf("%d %d", &temp.num, &temp.dir);
		root.push(temp);
	}

	while (!root.empty()) {
		Way temp = root.front();
		root.pop();
		
		int leftDir = temp.dir*(-1);
		int rightDir = temp.dir*(-1);

		//0은 왼쪽 //1은 오른쪽 업데이트
		for (int i = 1; i <= 4; i++) {
			state[i][0] = arr[i][6];
			state[i][1] = arr[i][2];
		}





		if (temp.dir == 1) { //시계 방향
			int sub = arr[temp.num][7];
			for (int i = 7; i >= 1; i--) {
				arr[temp.num][i] = arr[temp.num][i-1];
			}
			arr[temp.num][0] = sub;
		}
		else {				//반시계 방향
			int sub = arr[temp.num][0];
			for (int i = 0; i < 7; i++) {
				arr[temp.num][i] = arr[temp.num][i + 1];
			}
			arr[temp.num][7] = sub;
		}






		//왼쪽탐색
		for (int num = temp.num; num > 0; num--) {
			if (state[num][0] == state[num - 1][1]) {	//같을 경우
				break;
			}
			else {	//다를 경우
				if (leftDir == 1) {
					int sub = arr[num-1][7];
					for (int i = 7; i >= 1; i--) {
						arr[num - 1][i] = arr[num - 1][i - 1];
					}
					arr[num - 1][0] = sub;
				}
				else {
					int sub = arr[num-1][0];
					for (int i = 0; i < 7; i++) {
						arr[num - 1][i] = arr[num - 1][i + 1];
					}
					arr[num - 1][7] = sub;
				}
			}
			leftDir *= (-1);
		}


		//오른쪽 탐색
		for (int num = temp.num; num < 4; num++) {
			if (state[num][1] == state[num + 1][0]) {
				break;			//같을 경우 break;
			}
			else {
				if (rightDir == 1) {		//시계
					int sub = arr[num + 1][7];
					for (int i = 7; i >= 1; i--) {
						arr[num + 1][i] = arr[num + 1][i - 1];
					}
					arr[num + 1][0] = sub;
				
				
				
				}
				else {
					int sub = arr[num+1][0];
					for (int i = 0; i < 7; i++) {
						arr[num + 1][i] = arr[num + 1][i + 1];
					}
					arr[num + 1][7] = sub;
				
				
				
				}
			}
			rightDir *= (-1);
		}
	}
	result = arr[1][0] * 1 + arr[2][0] * 2 + arr[3][0] * 4 + arr[4][0] * 8;

	printf("%d", result);
	return 0;
}