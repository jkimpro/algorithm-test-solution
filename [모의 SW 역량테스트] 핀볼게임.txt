///////////// 내답안

#include <stdio.h>
#include <stdlib.h>

#define UP 100
#define DOWN 101
#define LEFT 102
#define RIGHT 103

using namespace std;

typedef struct ball
{
   int w, h;
   int dir;
}Ball;

typedef struct hole
{
   int w[2];
   int h[2];
   bool isFull;
}Hole;

Ball ball;

Hole hole[5];
int arr[100][100];
int result;
int firstW, firstH;

int n;

void oneBlock()
{
    switch (ball.dir)
    {
   case UP: { ball.dir = DOWN; break; }
   case DOWN: { ball.dir = RIGHT; break; }
   case LEFT: {ball.dir = UP; break; }
   default: {ball.dir = LEFT; break; }
   }
}
void twoBlock()
{
  switch (ball.dir)
  {
   case UP: { ball.dir = RIGHT; break; }
   case DOWN: { ball.dir = UP; break; }
   case LEFT: {ball.dir = DOWN; break; }
   case RIGHT: {ball.dir = LEFT; break; }
  }
}
void threeBlock()
{
  switch (ball.dir)
  {
    case UP: { ball.dir = LEFT; break; }
    case DOWN: { ball.dir = UP; break; }
    case LEFT: {ball.dir = RIGHT; break; }
    case RIGHT: {ball.dir = DOWN; break; }
  }
}
void fourBlock()
{
  switch (ball.dir)
  {
    case UP: { ball.dir = DOWN; break; }
    case DOWN: { ball.dir = LEFT; break; }
    case LEFT: {ball.dir = RIGHT; break; }
    case RIGHT: {ball.dir = UP; break; }
  }
}
void fiveBlock()
{
    switch (ball.dir)
      {
      case UP: { ball.dir = DOWN; break; }
      case DOWN: { ball.dir = UP; break; }
      case LEFT: {ball.dir = RIGHT; break; }
      case RIGHT: {ball.dir = LEFT; break; }
      }
}

void isWall()
{
   if(ball.w<0){ball.dir =DOWN; }//ball.w+=1;}
   else if(ball.h<0){ball.dir = RIGHT; }//ball.h+=1;}
   else if(ball.w>=n){ball.dir = UP; }//ball.w -=1;}
   else if(ball.h>=n){ball.dir = LEFT; }//ball.h -=1;}
}

void Go()
{
   int count =0;
      while (1) //부딪히는 이벤트가 중요하다는 것을 인지
      {
      if(ball.w<0 || ball.h<0 || ball.w>=n || ball.h>=n){isWall(); count++;}
      else if (arr[ball.w][ball.h] == -1) { break; }
      else if (arr[ball.w][ball.h] == 1) { oneBlock(); count++; }
      else if (arr[ball.w][ball.h] == 2) { twoBlock(); count++; }
      else if (arr[ball.w][ball.h] == 3) { threeBlock(); count++; }
      else if (arr[ball.w][ball.h] == 4) { fourBlock(); count++; }
      else if (arr[ball.w][ball.h] == 5) { fiveBlock(); count++;}
      else if (arr[ball.w][ball.h] >= 6 && arr[ball.w][ball.h] <= 10) {
         //웜홀
         int temp1 = ball.w;
         int temp2 = ball.h;
         
         if (hole[arr[temp1][temp2]-6].w[0] == temp1 && hole[arr[temp1][temp2]-6].h[0] == temp2)
         { 
               ball.w = hole[arr[temp1][temp2]-6].w[1];
            ball.h = hole[arr[temp1][temp2]-6].h[1];
           }
            else
            {            
             ball.w = hole[arr[temp1][temp2]-6].w[0];
               ball.h = hole[arr[temp1][temp2]-6].h[0];
           }
      }
      
         switch (ball.dir)
         {
        case UP: { ball.w -= 1; break; }
        case DOWN: { ball.w += 1; break; }
        case LEFT: {ball.h -= 1; break; }
        case RIGHT: {ball.h += 1; break; }
         }
         if(ball.w == firstW && ball.h == firstH) {break;}
   }
      if(count > result) {result = count;}
   return;
}

int main()
{
   int real;
   scanf("%d", &real);

      for (int testcase = 1; testcase <= real; testcase++)
      {
       result= 0;
       scanf("%d", &n);

         for (int i = 0; i < 5; i++)
         {
            hole[i].w[0] = -1;
            hole[i].h[0] = -1;
         
            hole[i].w[1] = -1;
            hole[i].h[1] = -1;   
         hole[i].isFull = false;
         }

         for (int i = 0; i < n; i++)
         {
            for (int j = 0; j < n; j++)
            {
            scanf("%d", &arr[i][j]);

               if(arr[i][j] >= 6 && arr[i][j]<= 10)
               {
                 if (hole[arr[i][j] - 6].isFull == false) {
                    hole[arr[i][j] - 6].w[0] = i;
                    hole[arr[i][j] - 6].h[0] = j;
                    hole[arr[i][j] - 6].isFull = true;
                 }
                 else
                 {
                    hole[arr[i][j] - 6].w[1] = i;
                    hole[arr[i][j] - 6].h[1] = j;
                 }
               }   
            }
      }
      
         for (int i = 0; i < n; i++)
         {
            for (int j = 0; j < n; j++)
            {
               if (arr[i][j] == 0)
               {
                  for (int go = UP; go < UP + 4; go++)
                  {
                       firstW = i; firstH = j;
                       ball.w = i; ball.h = j;
                       ball.dir = go; 
                    Go();
                     }
               }
            }   
         }
      printf("#%d %d\n", testcase, result);
   }
   return 0;
}