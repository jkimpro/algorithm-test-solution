//사탕게임
#include <stdio.h>
#include <algorithm>

using namespace std;

int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};

int n;
int result=1;
char arr[100][100];

bool canEx(int r, int c, int orR, int orC) {
	if (r < 0 || r >= n || c < 0 || c >= n) {
		return false;
	}
	return true;
	
}
void search() {
	
	for (int i = 0; i < n; i++) {
		char temp = arr[i][0];
		int count = 0;
		for (int j = 0; j < n; j++) {
			if (temp == arr[i][j]) {
				count++;
			}
			else {
				result = max(count, result);
				temp = arr[i][j];
				count = 1;
			}
		}
		result = max(count, result);

	}

	//열 중심
	for (int i = 0; i < n; i++) {
		char temp = arr[0][i];
		int count = 0;
		for (int j = 0; j < n; j++) {
			if (temp == arr[j][i]) {
				count++;
			}
			else {
				result = max(count, result);
				temp = arr[j][i];
				count = 1;
			}
		}
		result = max(count, result);

	}
}
int main() {
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%s", arr[i]);
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++) {
			for (int dir = 0; dir < 4; dir++) {
				if (canEx(i + dr[dir], j + dc[dir], i,j)) {
					char temp = arr[i][j];

					arr[i][j] = arr[i + dr[dir]][j + dc[dir]];
					arr[i + dr[dir]][j + dc[dir]] = temp;
	
					search();

					temp = arr[i][j];
					arr[i][j] = arr[i + dr[dir]][j + dc[dir]];
					arr[i + dr[dir]][j + dc[dir]] = temp;
				}
			}

		}
	}
	printf("%d", result);
	return 0;
}