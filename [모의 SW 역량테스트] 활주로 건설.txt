///////////////내 답안
/////발생할 경우의 수 모두다 고려할 것.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <queue>
using namespace std;

typedef struct location
{
	int row;
	int col;
}Loc;

int result;
int n;
int x;
int arr[21][21];
int backup[21][21];

int main()
{
	int real;
	scanf("%d", &real);
	
	for (int testcase = 1; testcase <= real; testcase++)
	{
		result = 0;
		queue <Loc> indRow[7][20]; //행
		queue <Loc> indCol[7][20]; //열

		scanf("%d %d", &n, &x);

		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				scanf("%d", &arr[i][j]);
				backup[i][j] = arr[i][j];

				Loc temp = { i,j };

				indRow[arr[i][j]][i].push(temp);
				indCol[arr[i][j]][j].push(temp);
			}
		}

		//가로만
		for (int i = 0; i < n; i++){ //이건 세로여서 고정
			int primaryNum = arr[i][0];
			int num = 0;
			int count = 0;
			int flag = 0;

			//indRow[숫자][행]
			if (indRow[primaryNum][i].size() == n) { result += 1; continue; }

			for (int col = 0; col < n; col++)
			{
				if (col == 0) { num = arr[i][0]; count++; continue; }
				else if (num != arr[i][col])
				{
					if (abs(arr[i][col] - num) > 1) { flag = 1;break; }		//1이상 차이가 날경우
					else if (arr[i][col] > num)									//현재값이 높은 경우
					{
						//이전 값들 확인
						if (count >= x && col-x>=0) {
							for (int state = col - 1; state >= col - x; state--)
							{
								if (arr[i][state] == -1) { flag = 1; break; }				//다른값이랑 겹쳤다는 뜻 탈출
								else { arr[i][state] = -1; }
							}
							if (flag == 1) { break; }				//탈출
							num = arr[i][col]; count = 1;			//새로운 기준점 초기화
						}
						else{flag = 1;break;}
					}
					else //현재값이 낮은 경우
					{
						//이후 값들 확인
						if (col + x <= n)
						{
							num = arr[i][col];
							for (int state = col; state < col + x; state++)
							{
								if (arr[i][state] == num) { arr[i][state] = -1;}
								else { flag = 1; break; }
							}
							if (flag == 1) { break;}
							col += (x-1); count = 0;
						}
						else { flag = 1;  break; }
					}
				}
				else
				{
					count++;
				}
			}
			if (flag == 0) {  result += 1; }
		}

		//세로만
		for (int i = 0; i < n; i++) { //이건 세로여서 고정
			int primaryNum = backup[0][i];
			int num = 0;
			int count = 0;
			int flag = 0;
			//indRow[숫자][행]
			if (indCol[primaryNum][i].size() == n) { result += 1; continue; }

			for (int row = 0; row < n; row++)
			{
				if (row == 0) { num = backup[0][i]; count++; continue; }
				else if (num != backup[row][i])
				{
					if (abs(backup[row][i] - num) > 1) {flag = 1; break; }			//1이상 차이가 날경우
					else if (backup[row][i] > num)									//현재값이 높은 경우
					{
						//이전 값들 확인
						if (count >= x && row - x >= 0) {
							for (int state = row - 1; state >= row - x; state--)
							{
								if (backup[state][i] == -1) {flag = 1; break; }				//다른값이랑 겹쳤다는 뜻 탈출
								else { backup[state][i] = -1; }
							}
							if (flag == 1) { break; }				//탈출
							num = backup[row][i]; count = 1;			//새로운 기준점 초기화
						}
						else { flag = 1; break; }
					}
					else //현재값이 낮은 경우
					{
						//이후 값들 확인
						if (row + x <= n)
						{
							num = backup[row][i];
							for (int state = row; state < row + x; state++)
							{
								if (backup[state][i] == num) { backup[state][i] = -1; }
								else { flag = 1; break; }
							}
							if (flag == 1) { break; }
							row += (x-1); count = 0;
						}
						else { flag = 1; break;}
					}
				}
				else
				{
					count++;
				}
			}
			if (flag == 0) { result += 1; }
		}

		printf("#%d %d\n", testcase, result);
	}
	
	return 0;
}